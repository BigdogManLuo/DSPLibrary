#include "driverlib.h"
#include "device.h"
#include "nokia_5110.h"


const uchar font6x8[][6] =
{
    { 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 },   // sp
    { 0x0000, 0x0000, 0x0000, 0x2f00, 0x0000, 0x0000 },   // !
    { 0x0000, 0x0000, 0x0700, 0x0000, 0x0700, 0x0000 },   // "
    { 0x0000, 0x1400, 0x7f00, 0x1400, 0x7f00, 0x1400 },   // #
    { 0x0000, 0x2400, 0x2a00, 0x7f00, 0x2a00, 0x1200 },   // $
    { 0x0000, 0x6200, 0x6400, 0x0800, 0x1300, 0x2300 },   // %
    { 0x0000, 0x3600, 0x4900, 0x5500, 0x2200, 0x5000 },   // &
    { 0x0000, 0x0000, 0x0500, 0x0300, 0x0000, 0x0000 },   // '
    { 0x0000, 0x0000, 0x1c00, 0x2200, 0x4100, 0x0000 },   // (
    { 0x0000, 0x0000, 0x4100, 0x2200, 0x1c00, 0x0000 },   // )
    { 0x0000, 0x1400, 0x0800, 0x3E00, 0x0800, 0x1400 },   // *
    { 0x0000, 0x0800, 0x0800, 0x3E00, 0x0800, 0x0800 },   // +
    { 0x0000, 0x0000, 0x0000, 0xA000, 0x6000, 0x0000 },   // ,
    { 0x0000, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800 },   // -
    { 0x0000, 0x0000, 0x6000, 0x6000, 0x0000, 0x0000 },   // .
    { 0x0000, 0x2000, 0x1000, 0x0800, 0x0400, 0x0200 },   // /
    { 0x0000, 0x3E00, 0x5100, 0x4900, 0x4500, 0x3E00 },   // 0
    { 0x0000, 0x0000, 0x4200, 0x7F00, 0x4000, 0x0000 },   // 1
    { 0x0000, 0x4200, 0x6100, 0x5100, 0x4900, 0x4600 },   // 2
    { 0x0000, 0x2100, 0x4100, 0x4500, 0x4B00, 0x3100 },   // 3
    { 0x0000, 0x1800, 0x1400, 0x1200, 0x7F00, 0x1000 },   // 4
    { 0x0000, 0x2700, 0x4500, 0x4500, 0x4500, 0x3900 },   // 5
    { 0x0000, 0x3C00, 0x4A00, 0x4900, 0x4900, 0x3000 },   // 6
    { 0x0000, 0x0100, 0x7100, 0x0900, 0x0500, 0x0300 },   // 7
    { 0x0000, 0x3600, 0x4900, 0x4900, 0x4900, 0x3600 },   // 8
    { 0x0000, 0x0600, 0x4900, 0x4900, 0x2900, 0x1E00 },   // 9
    { 0x0000, 0x0000, 0x3600, 0x3600, 0x0000, 0x0000 },   // :
    { 0x0000, 0x0000, 0x5600, 0x3600, 0x0000, 0x0000 },   // ;
    { 0x0000, 0x0800, 0x1400, 0x2200, 0x4100, 0x0000 },   // <
    { 0x0000, 0x1400, 0x1400, 0x1400, 0x1400, 0x1400 },   // =
    { 0x0000, 0x0000, 0x4100, 0x2200, 0x1400, 0x0800 },   // >
    { 0x0000, 0x0200, 0x0100, 0x5100, 0x0900, 0x0600 },   // ?
    { 0x0000, 0x3200, 0x4900, 0x5900, 0x5100, 0x3E00 },   // @
    { 0x0000, 0x7C00, 0x1200, 0x1100, 0x1200, 0x7C00 },   // A
    { 0x0000, 0x7F00, 0x4900, 0x4900, 0x4900, 0x3600 },   // B
    { 0x0000, 0x3E00, 0x4100, 0x4100, 0x4100, 0x2200 },   // C
    { 0x0000, 0x7F00, 0x4100, 0x4100, 0x2200, 0x1C00 },   // D
    { 0x0000, 0x7F00, 0x4900, 0x4900, 0x4900, 0x4100 },   // E
    { 0x0000, 0x7F00, 0x0900, 0x0900, 0x0900, 0x0100 },   // F
    { 0x0000, 0x3E00, 0x4100, 0x4900, 0x4900, 0x7A00 },   // G
    { 0x0000, 0x7F00, 0x0800, 0x0800, 0x0800, 0x7F00 },   // H
    { 0x0000, 0x0000, 0x4100, 0x7F00, 0x4100, 0x0000 },   // I
    { 0x0000, 0x2000, 0x4000, 0x4100, 0x3F00, 0x0100 },   // J
    { 0x0000, 0x7F00, 0x0800, 0x1400, 0x2200, 0x4100 },   // K
    { 0x0000, 0x7F00, 0x4000, 0x4000, 0x4000, 0x4000 },   // L
    { 0x0000, 0x7F00, 0x0200, 0x0C00, 0x0200, 0x7F00 },   // M
    { 0x0000, 0x7F00, 0x0400, 0x0800, 0x1000, 0x7F00 },   // N
    { 0x0000, 0x3E00, 0x4100, 0x4100, 0x4100, 0x3E00 },   // O
    { 0x0000, 0x7F00, 0x0900, 0x0900, 0x0900, 0x0600 },   // P
    { 0x0000, 0x3E00, 0x4100, 0x5100, 0x2100, 0x5E00 },   // Q
    { 0x0000, 0x7F00, 0x0900, 0x1900, 0x2900, 0x4600 },   // R
    { 0x0000, 0x4600, 0x4900, 0x4900, 0x4900, 0x3100 },   // S
    { 0x0000, 0x0100, 0x0100, 0x7F00, 0x0100, 0x0100 },   // T
    { 0x0000, 0x3F00, 0x4000, 0x4000, 0x4000, 0x3F00 },   // U
    { 0x0000, 0x1F00, 0x2000, 0x4000, 0x2000, 0x1F00 },   // V
    { 0x0000, 0x3F00, 0x4000, 0x3800, 0x4000, 0x3F00 },   // W
    { 0x0000, 0x6300, 0x1400, 0x0800, 0x1400, 0x6300 },   // X
    { 0x0000, 0x0700, 0x0800, 0x7000, 0x0800, 0x0700 },   // Y
    { 0x0000, 0x6100, 0x5100, 0x4900, 0x4500, 0x4300 },   // Z
    { 0x0000, 0x0000, 0x7F00, 0x4100, 0x4100, 0x0000 },   // [
    { 0x0000, 0x5500, 0x2A00, 0x5500, 0x2A00, 0x5500 },   // 55
    { 0x0000, 0x0000, 0x4100, 0x4100, 0x7F00, 0x0000 },   // ]
    { 0x0000, 0x0400, 0x0200, 0x0100, 0x0200, 0x0400 },   // ^
    { 0x0000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000 },   // _
    { 0x0000, 0x0000, 0x0100, 0x0200, 0x0400, 0x0000 },   // '
    { 0x0000, 0x2000, 0x5400, 0x5400, 0x5400, 0x7800 },   // a
    { 0x0000, 0x7F00, 0x4800, 0x4400, 0x4400, 0x3800 },   // b
    { 0x0000, 0x3800, 0x4400, 0x4400, 0x4400, 0x2000 },   // c
    { 0x0000, 0x3800, 0x4400, 0x4400, 0x4800, 0x7F00 },   // d
    { 0x0000, 0x3800, 0x5400, 0x5400, 0x5400, 0x1800 },   // e
    { 0x0000, 0x0800, 0x7E00, 0x0900, 0x0100, 0x0200 },   // f
    { 0x0000, 0x1800, 0xA400, 0xA400, 0xA400, 0x7C00 },   // g
    { 0x0000, 0x7F00, 0x0800, 0x0400, 0x0400, 0x7800},   // h
    { 0x0000, 0x0000, 0x4400, 0x7D00, 0x4000, 0x0000 },   // i
    { 0x0000, 0x4000, 0x8000, 0x8400, 0x7D00, 0x0000 },   // j
    { 0x0000, 0x7F00, 0x1000, 0x2800, 0x4400, 0x0000 },   // k
    { 0x0000, 0x0000, 0x4100, 0x7F00, 0x4000, 0x0000 },   // l
    { 0x0000, 0x7C00, 0x0400, 0x1800, 0x0400, 0x7800 },   // m
    { 0x0000, 0x7C00, 0x0800, 0x0400, 0x0400, 0x7800 },   // n
    { 0x0000, 0x3800, 0x4400, 0x4400, 0x4400, 0x3800 },   // o
    { 0x0000, 0xFC00, 0x2400, 0x2400, 0x2400, 0x1800 },   // p
    { 0x0000, 0x1800, 0x2400, 0x2400, 0x1800, 0xFC00 },   // q
    { 0x0000, 0x7C00, 0x0800, 0x0400, 0x0400, 0x0800 },   // r
    { 0x0000, 0x4800, 0x5400, 0x5400, 0x5400, 0x2000 },   // s
    { 0x0000, 0x0400, 0x3F00, 0x4400, 0x4000, 0x2000 },   // t
    { 0x0000, 0x3C00, 0x4000, 0x4000, 0x2000, 0x7C00 },   // u
    { 0x0000, 0x1C00, 0x2000, 0x4000, 0x2000, 0x1C00 },   // v
    { 0x0000, 0x3C00, 0x4000, 0x3000, 0x4000, 0x3C00 },   // w
    { 0x0000, 0x4400, 0x2800, 0x1000, 0x2800, 0x4400 },   // x
    { 0x0000, 0x1C00, 0xA000, 0xA000, 0xA000, 0x7C00 },   // y
    { 0x0000, 0x4400, 0x6400, 0x5400, 0x4C00, 0x4400 },   // z
    { 0x1400, 0x1400, 0x1400, 0x1400, 0x1400, 0x1400 }    // horiz lines
};
const char write_chinese[][24]={

//设
{0x1000,0x1100,0xF200,0x0000,0x5000,0xCF00,0x4100,0x4100,0x4F00,0xD000,0x1000,0x0000,0x0000,0x0000,0x0700,0x0200,0x0800,0x0800,0x0500,0x0200,0x0500,0x0800,0x0800,0x0000},
//定
{0x2C00,0x2400,0xA400,0x2400,0x2500,0xE600,0x2400,0x2400,0x2400,0x2400,0x2C00,0x0000,0x0800,0x0400,0x0300,0x0400,0x0800,0x0F00,0x0900,0x0900,0x0900,0x0900,0x0800,0x0000},
 //值
{0x1000,0xFC00,0x0300,0x0000,0xFA00,0xAA00,0xAF00,0xAA00,0xAA00,0xFA00,0x0200,0x0000,0x0000,0x0F00,0x0000,0x0800,0x0F00,0x0A00,0x0A00,0x0A00,0x0A00,0x0F00,0x0800,0x0000},
//：
    {0x0000,0x0000,0x3000,0x3000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0300,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
//实
    {0x8600,0x8200,0xA200,0xCA00,0x9200,0x8300,0xFA00,0x8200,0x8200,0x8200,0x8600,0x0000,0x0800,0x0800,0x0400,0x0400,0x0200,0x0100,0x0000,0x0200,0x0200,0x0400,0x0800,0x0000},
//际
    {0xFE00,0x0200,0x3200,0xCE00,0x1000,0x9200,0x1200,0xF200,0x1200,0x9200,0x1000,0x0000,0x0F00,0x0200,0x0200,0x0100,0x0200,0x0100,0x0800,0x0F00,0x0000,0x0000,0x0300,0x0000},
 //值
{0x1000,0xFC00,0x0300,0x0000,0xFA00,0xAA00,0xAF00,0xAA00,0xAA00,0xFA00,0x0200,0x0000,0x0000,0x0F00,0x0000,0x0800,0x0F00,0x0A00,0x0A00,0x0A00,0x0A00,0x0F00,0x0800,0x0000},
//：
    {0x0000,0x0000,0x3000,0x3000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0300,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
  //过
    {0x1000,0x1100,0xF200,0x0000,0x0800,0x2800,0xC800,0x0800,0x0800,0xFF00,0x0800,0x0000,0x0800,0x0400,0x0300,0x0400,0x0800,0x0800,0x0800,0x0A00,0x0A00,0x0B00,0x0800,0x0000},
    //压
    {0x0000,0xFE00,0x0200,0x4200,0x4200,0x4200,0xFA00,0x4200,0x4200,0x4200,0x0200,0x0000,0x0800,0x0700,0x0800,0x0800,0x0800,0x0800,0x0F00,0x0800,0x0900,0x0A00,0x0800,0x0000},
    //了
    {0x0000,0x0200,0x0200,0x0200,0x0200,0x0200,0xE200,0x1200,0x0A00,0x0600,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x0800,0x0F00,0x0000,0x0000,0x0000,0x0000,0x0000},
    //！
    {0x0000,0x0000,0x3E00,0x3E00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0300,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
        //欠
            {0x2000,0x1800,0x0700,0x0400,0x8400,0x7400,0x8400,0x0400,0x2400,0x1C00,0x0000,0x0000,0x0800,0x0800,0x0400,0x0200,0x0100,0x0000,0x0100,0x0200,0x0400,0x0800,0x0800,0x0000},
        //压

    {0x0000,0xFE00,0x0200,0x4200,0x4200,0x4200,0xFA00,0x4200,0x4200,0x4200,0x0200,0x0000,0x0800,0x0700,0x0800,0x0800,0x0800,0x0800,0x0F00,0x0800,0x0900,0x0A00,0x0800,0x0000},
   //了
    {0x0000,0x0200,0x0200,0x0200,0x0200,0x0200,0xE200,0x1200,0x0A00,0x0600,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x0800,0x0F00,0x0000,0x0000,0x0000,0x0000,0x0000},
    //！
    {0x0000,0x0000,0x3E00,0x3E00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0300,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
            //过
    {0x1000,0x1100,0xF200,0x0000,0x0800,0x2800,0xC800,0x0800,0x0800,0xFF00,0x0800,0x0000,0x0800,0x0400,0x0300,0x0400,0x0800,0x0800,0x0800,0x0A00,0x0A00,0x0B00,0x0800,0x0000},
//流
    {0x2200,0x4400,0x0000,0x2400,0xB400,0x2C00,0xA500,0x2600,0xA400,0x3400,0x6400,0x0000,0x0400,0x0200,0x0800,0x0400,0x0300,0x0000,0x0F00,0x0000,0x0700,0x0800,0x0E00,0x0000},
 //了
    {0x0000,0x0200,0x0200,0x0200,0x0200,0x0200,0xE200,0x1200,0x0A00,0x0600,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x0800,0x0F00,0x0000,0x0000,0x0000,0x0000,0x0000},
    //！
    {0x0000,0x0000,0x3E00,0x3E00,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0300,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
    //电
    {0xFC00,0x2400,0x2400,0x2400,0xFF00,0x2400,0x2400,0x2400,0xFC00,0x0000,0x0000,0x0000,0x0300,0x0100,0x0100,0x0100,0x0700,0x0900,0x0900,0x0900,0x0900,0x0800,0x0E00,0x0000},
//流
    {0x2200,0x4400,0x0000,0x2400,0xB400,0x2C00,0xA500,0x2600,0xA400,0x3400,0x6400,0x0000,0x0400,0x0200,0x0800,0x0400,0x0300,0x0000,0x0F00,0x0000,0x0700,0x0800,0x0E00,0x0000},
//值
    {0x1000,0xFC00,0x0300,0x0000,0xFA00,0xAA00,0xAF00,0xAA00,0xAA00,0xFA00,0x0200,0x0000,0x0000,0x0F00,0x0000,0x0800,0x0F00,0x0A00,0x0A00,0x0A00,0x0A00,0x0F00,0x0800,0x0000},
//：
    {0x0000,0x0000,0x3000,0x3000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0300,0x0300,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},

};



void LCD_GPIO_Init()
{
    EALLOW;
    GPIO_setDirectionMode(130, GPIO_DIR_MODE_OUT);    // GPIO6 = output
    GPIO_setPadConfig(130, GPIO_PIN_TYPE_PULLUP);     // Enable pullup on GPIO6
 //   GPIO_writePin(130, 1);                            // Load output latch
    GPIO_setPinConfig(GPIO_130_GPIO130);                // GPIO6 = GPIO6

    GPIO_setDirectionMode(66, GPIO_DIR_MODE_OUT);    // GPIO6 = output
    GPIO_setPadConfig(66, GPIO_PIN_TYPE_PULLUP);     // Enable pullup on GPIO6
 //   GPIO_writePin(66, 1);                            // Load output latch
    GPIO_setPinConfig(GPIO_66_GPIO66);                // GPIO6 = GPIO6

    GPIO_setDirectionMode(131, GPIO_DIR_MODE_OUT);    // GPIO6 = output
    GPIO_setPadConfig(131, GPIO_PIN_TYPE_PULLUP);     // Enable pullup on GPIO6
 //   GPIO_writePin(131, 1);                            // Load output latch
    GPIO_setPinConfig(GPIO_131_GPIO131);                // GPIO6 = GPIO6

    GPIO_setDirectionMode(63, GPIO_DIR_MODE_OUT);    // GPIO6 = output
    GPIO_setPadConfig(63, GPIO_PIN_TYPE_PULLUP);     // Enable pullup on GPIO6
 //   GPIO_writePin(63, 1);                            // Load output latch
    GPIO_setPinConfig(GPIO_63_GPIO63);                // GPIO6 = GPIO6

    GPIO_setDirectionMode(65, GPIO_DIR_MODE_OUT);    // GPIO6 = output
    GPIO_setPadConfig(65, GPIO_PIN_TYPE_PULLUP);     // Enable pullup on GPIO6
 //   GPIO_writePin(65, 1);                            // Load output latch
    GPIO_setPinConfig(GPIO_65_GPIO65);                // GPIO6 = GPIO6
    /*
    GPIO_setDirectionMode(11, GPIO_DIR_MODE_OUT);    // GPIO6 = output
    GPIO_setPadConfig(11, GPIO_PIN_TYPE_PULLUP);     // Enable pullup on GPIO6
    GPIO_writePin(11, 1);                            // Load output latch
    GPIO_setPinConfig(GPIO_11_GPIO11);                // GPIO6 = GPIO6

     GPIO_setDirectionMode(12, GPIO_DIR_MODE_OUT);    // GPIO6 = output
     GPIO_setPadConfig(12, GPIO_PIN_TYPE_PULLUP);     // Enable pullup on GPIO6
     GPIO_writePin(12, 1);                            // Load output latch
     GPIO_setPinConfig(GPIO_12_GPIO12);                // GPIO6 = GPIO6
*/
    EDIS;
}
void pinMux_init()
{
    //SPIA -> mySPI0 Pinmux

    GPIO_setMasterCore(63, GPIO_CORE_CPU1);
    GPIO_setPinConfig(GPIO_63_SPISIMOB);
    GPIO_setPadConfig(63, GPIO_PIN_TYPE_PULLUP);
    GPIO_setQualificationMode(63, GPIO_QUAL_ASYNC);
    GPIO_setMasterCore(65, GPIO_CORE_CPU1);
    GPIO_setPinConfig(GPIO_65_SPICLKB);
    GPIO_setPadConfig(65, GPIO_PIN_TYPE_PULLUP);
    GPIO_setQualificationMode(65, GPIO_QUAL_ASYNC);

    GPIO_setMasterCore(66, GPIO_CORE_CPU1);
    GPIO_setPinConfig(GPIO_66_SPISTEB);
    GPIO_setPadConfig(66, GPIO_PIN_TYPE_PULLUP);
    GPIO_setQualificationMode(66, GPIO_QUAL_ASYNC);

}

void SPI_init()
{
    SPI_disableModule(SPIB_BASE);
    SPI_setConfig(SPIB_BASE, DEVICE_LSPCLK_FREQ, SPI_PROT_POL1PHA0,
                  SPI_MODE_MASTER, 2000000,8);
    SPI_setBaudRate(SPIB_BASE, DEVICE_LSPCLK_FREQ, 2000000);
    SPI_disableFIFO(SPIB_BASE);
    SPI_disableLoopback(SPIB_BASE);
    SPI_setSTESignalPolarity(SPIB_BASE,SPI_STE_ACTIVE_LOW);
    SPI_enableModule(SPIB_BASE);
}


void board_init()
{
    EALLOW;
    SPI_init();
    pinMux_init();

    EDIS;
}

void LCD_init(void)
  {
  //  res=0;
//    RES_OFF;
    LCD_GPIO_Init();
    GPIO_writePin(130,0);
//  delay_1ms();
    DEVICE_DELAY_US(1);
 // res=1;
 //   RES_ON;
    GPIO_writePin(130,1);
//  ce=0;
//    CE_ON;
    GPIO_writePin(66,1);
//    DIN_ON;
    GPIO_writePin(63,1);
//    DC_ON;
    GPIO_writePin(131,1);
 //   CLK_ON;
    GPIO_writePin(65,1);
    board_init();
    LCD_write_byte(0x2100,0);
    LCD_write_byte(0xd000,0);
    LCD_write_byte(0x2000,0);
    LCD_write_byte(0x0c00,0);
  }


void LCD_clear(void)
  {
    unsigned int i;

    LCD_write_byte(0x0c00, 0);
    LCD_write_byte(0x8000, 0);

    for (i=0; i<504; i++)
      LCD_write_byte(0x0000, 1);
  }


void LCD_set_XY(unsigned char X, unsigned char Y)
  {
    X = (X<<8)|0x0000;
    Y = (Y<<8)|0X0000;
    LCD_write_byte(0x4000 | Y, 0);        // column
    LCD_write_byte(0x8000 | X, 0);            // row
  }


void LCD_write_char(unsigned char c)
  {
    unsigned char line;

    c -= 32;

    for (line=0; line<6; line++)
    { LCD_write_byte(font6x8[c][line], 1);}
  }

void LCD_write_english_string(unsigned char X,unsigned char Y,char *s)
  {
    LCD_set_XY(X,Y);
    while (*s) 
      {
     LCD_write_char(*s);
     s++;
      }
  }

void LCD_write_chinese_string(unsigned char X, unsigned char Y, 
                   unsigned char ch_with,unsigned char num,
                   unsigned char line,unsigned char row)
  {
    unsigned char i,n;

    LCD_set_XY(X,Y);

    for (i=0;i<num;)
      {
        for (n=0; n<ch_with*2; n++)
          { 
            if (n==ch_with)
              {
                if (i==0) LCD_set_XY(X,Y+1);
                else
                   LCD_set_XY((X+(ch_with+row)*i),Y+1);
              }
            LCD_write_byte(write_chinese[line+i][n],1);
          }
        i++;
        LCD_set_XY((X+(ch_with+row)*i),Y);
      }
  }

void LCD_write_byte(unsigned int dat, unsigned char command)
  {
    if(command)
    {GPIO_writePin(131,1);}
    else
    { GPIO_writePin(131,0);}
    SPI_writeDataBlockingNonFIFO(SPIB_BASE, dat);
    DEVICE_DELAY_US(5);
}

void LCD_ShowChar(unsigned char X,unsigned char Y,unsigned char c)
  {
    LCD_set_XY(X,Y);
    LCD_write_char(c);
  }

unsigned int LCD_mypow(unsigned char m,unsigned char n)
{
    unsigned int result=1;
    while(n--)result*=m;
    return result;
}

void LCD_ShowNum(unsigned char x,unsigned char y,unsigned int num,unsigned char len)
{
    unsigned char t,temp;
    unsigned char enshow=0;
    for(t=0;t<len;t++)
    {
        temp=(num/LCD_mypow(10,len-t-1))%10;
        if(enshow==0&&t<(len-1))
        {
            if(temp==0)
            {
                LCD_ShowChar(x+6*t,y,'0');
                continue;
            }else enshow=1;
        }
        LCD_ShowChar(x+6*t,y,temp+'0');
    }
}
//不要轻易使用这个函数，会变得不幸，它已经被改造成了小数点后最后一位数字一定显示0 =.=
void LCD_ShowSetFloat(unsigned char x, unsigned char y,float num,unsigned int n1,unsigned int n2)
{
    float num0;
    int num1,i,p=1;
    int l = 0;
    float num2;
    num0=num;
    for(i=0;i<n2;i++)   p=p*10;
    num1=(int)(num*p)%p;
    l = num1%10;
    if(l==0)
    {num1 = num1/10;}
    else
    {num1 = num1/10+1;}
    num2 = num0-(int)num0;
    if(num2>0.91)
    {LCD_ShowNum(x,y,num0+1,n1);}
    else
    {LCD_ShowNum(x,y,num0,n1);}
    LCD_ShowChar(x+n1*6+1,y,'.');
    LCD_ShowNum(x+(n1+1)*6,y,num1,n2-1);
    LCD_ShowChar(x+(n1+2)*6,y,'0');
}
void LCD_ShowFloat(unsigned char x, unsigned char y,float num,unsigned int n1,unsigned int n2)
{
    int num0,num1,i,p=1;
    num0=num;
    for(i=0;i<n2;i++)   p=p*10;
    num1=(int)(num*p)%p;
    LCD_ShowNum(x,y,num0,n1);
    LCD_ShowChar(x+n1*6+1,y,'.');
    LCD_ShowNum(x+(n1+1)*6,y,num1,n2);
}

void LCD_ShowString(unsigned char X,unsigned char Y,char *s)
  {
    LCD_set_XY(X,Y);
    while (*s)
      {
     LCD_write_char(*s);
     s++;
      }
  }
void show_adc_result(float set_volt,float Vout)
{     
   LCD_write_chinese_string(0,0,12,4,0,1);
   LCD_ShowSetFloat(50,0.7,set_volt,2,2);
   LCD_write_chinese_string(0,2,12,4,4,1);
   LCD_ShowSetFloat(50,2.8,Vout,2,2);
   //LCD_write_chinese_string(0,4,12,4,20,1);
   //LCD_ShowFloat(50,4.8,Iout,2,2);
}

void show_warning1()
{
    LCD_write_chinese_string(0,0,12,4,8,1);
}
void show_warning2()
{
    LCD_clear();
    LCD_write_chinese_string(0,0,12,4,12,1);
}
void show_warning3()
{
    LCD_clear();
    LCD_write_chinese_string(0,0,12,4,16,1);
}
