//PR姣斾緥璋愭尟鎺у埗鍣ㄧ殑瀹炵幇
//鏈�鍚庝竴娆′慨鏀规椂闂达細2022.7.20
//浣滆�咃細BigDogManLuo  Sichuan University

#include"pr.h"
#include"filter.h"
#include"math.h"

//PR鎺у埗鍣�
//杈撳叆锛�
//q:  闃熷垪缁撴瀯浣撴寚閽堬紝鐢ㄤ簬璁板繂杈撳嚭
//x:  PR鎺у埗鍣ㄥ綋鍓嶈緭鍏�
//SOS锛氫簩闃惰妭鐭╅樀锛屽惈涔夊弬鑰僪ttps://ww2.mathworks.cn/help/signal/ug/discrete-time-system-models.html#f1-973
//scale:缁�1灏卞彲浠�
//Kp Kr:姣斾緥璋愭尟绯绘暟
//MAX,Klim,pUpLimit锛氶�氳繃鍙嶉鎺у埗鏉ュ疄鐜癙R鎺у埗鍣ㄩ檺骞咃紝濡傛灉涓嶉渶瑕佽皟鐢紝鍒欏睆钄組AX鐩稿叧璇彞锛孠lim=0
//浣跨敤锛�
//鍙傝�働RTest.c鐨刴ain()鍑芥暟

double PRCalc(ButterQueue* q, float x, double* SOS, float scale, float Kp, float Kr, float MAX, float Klim, float* pupLimit)
{
    float Rresult = 0;
    float result = 0;
    float Presult = 0;
    float a = 0;
    InButterQueue(q, x-Klim * (*pupLimit));

    Presult = Kp * x;
    a = __divf32(1,SOS[3]);
    //a=1/SOS[3];
    Rresult = a * (Kr * (SOS[0] * q->data[q->rear] + SOS[1] * q->data[(q->rear + 2) % ButterSIZE] + SOS[2] * q->data[(q->rear + 1) % ButterSIZE]) - SOS[4] * q->lastResult - SOS[5] * q->prevResult);
    q->prevResult = q->lastResult;
    q->lastResult = Rresult;

    result = Rresult + Presult;

    /*
    if (result >= MAX)
    {
        *pupLimit = result - MAX;
        result = MAX;
    }
    else if (result <= (-MAX))
    {
        *pupLimit = result + MAX;
        result = -MAX;
    }
    else
    {
        *pupLimit = 0;
    }
    */
    return scale * result;
}
