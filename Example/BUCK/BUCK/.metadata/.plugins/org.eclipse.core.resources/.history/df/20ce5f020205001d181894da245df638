#include"filter.h"

// 鍦ㄨ繖閲屽畾涔夐渶瑕佹护娉㈢殑鍙橀噺鍒濆鍙傛暟








//搴撳嚱鏁板畾涔�

void InitQueue(Queue* q)
{
    int i=0;
	q->front = 0;
    q->rear = -1;
	q->flag_full = 0;
	for(i=0;i<=QueueSIZE-1;i++)
	{
	    q->data[i] =0;
	}
	q->frontData = 0;
	q->sumData = 0;
}

// 鍏ラ槦
void InQueue(Queue*q, float x)
{
	q->rear = (q->rear + 1) % QueueSIZE;    //闃熷熬鎸囬拡鍚庣Щ
	q->data[(q->rear)] = x;		//灏唜鎻掑叆闃熷熬
	
}

// 鍑洪槦
float OutQueue(Queue* q)
{   
	float frontNum = 0;
	frontNum = q->data[q->front];
	q->front = (q->front + 1) % QueueSIZE; //闃熷ご鎸囬拡鍚庣Щ
	return frontNum;
}



float AverFilter(Queue* q, float x)
{
	float averResult=0;
	if (q->flag_full == 0)
	{
		InQueue(q, x);//鍏ラ槦
		q->sumData += x;//璁＄畻鍧囧��
		//averResult=__divf32(q->sumData,(q->rear + 1));
		averResult=q->sumData/(q->rear + 1);
    }
	else
	{
		q->frontData = OutQueue(q);//鍏堝嚭闃熶紞
		InQueue(q, x);//鍐嶅叆闃�
		q->sumData = q->sumData + x - q->frontData;//璁＄畻鍧囧��
		//averResult =__divf32(q->sumData,QueueSIZE);
		averResult=q->sumData/QueueSIZE;
	}
	if (q->rear == QueueSIZE - 1)//鍒ゆ柇闃熸弧
	{
		q->flag_full = 1;
	}
	return averResult;
}

void InitButterQueue(ButterQueue* q)
{
    int i=0;
	q->rear = -1;
    for(i=0;i<=ButterSIZE-1;i++)
    {
        q->data[i] =0;
    }
	q->lastResult = 0;
	q->prevResult = 0;
}
void InButterQueue(ButterQueue* q, float x)
{
	q->rear = (q->rear + 1) % ButterSIZE;    //闃熷熬鎸囬拡鍚庣Щ
	q->data[(q->rear)] = x;		//灏唜鎻掑叆闃熷熬

}


//鐢ㄦ硶绀轰緥锛�
//ButterQueue* px =&qx;
//y=ButterWorthFilter( qx, x, SOS,scale)

double ButterWorthFilter(ButterQueue* q, float x, double* SOS,double scale) //浜岄樁宸寸壒娌冩柉婊ゆ尝鍣�
{
	double result = 0;
	double a = 0;
	InButterQueue(q, x);
	//a=1/SOS[3];                //如果是在VSCode上则用这一行
	a = __divf32(1,SOS[3]);      //如果是在CCS上则用这一行，除法加速
	result = a * (SOS[0] * q->data[q->rear] + SOS[1] * q->data[(q->rear+2)%ButterSIZE] + SOS[2] * q->data[(q->rear + 1) % ButterSIZE] - SOS[4] * q->lastResult - SOS[5] * q->prevResult);
	q->prevResult = q->lastResult;
	q->lastResult = result;
	return scale*result;
}
